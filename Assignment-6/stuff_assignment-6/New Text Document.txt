token.pos_



#include <stdio.h>
#include <stdlib.h>

#define SIZE 12    // size of the input array

void bucket_sort(float arr[], int n, int num_buckets) {
    int i, j, k;
    int count = 0;
    float min_val = arr[0];
    float max_val = arr[0];

    // Find the minimum and maximum values in the input array
    for (i = 1; i < n; i++) {
        if (arr[i] < min_val) {
            min_val = arr[i];
        }
        if (arr[i] > max_val) {
            max_val = arr[i];
        }
    }

    // Create the buckets
    float **buckets = (float **)malloc(num_buckets * sizeof(float *));
    for (i = 0; i < num_buckets; i++) {
        buckets[i] = (float *)malloc(n * sizeof(float));
    }

    // Place the elements of the input array into the buckets
    for (i = 0; i < n; i++) {
        int bucket_index = (int)((arr[i] - min_val) * num_buckets / (max_val - min_val + 1));
        buckets[bucket_index][count] = arr[i];
        count++;
    }

    // Sort each bucket using insertion sort
    for (i = 0; i < num_buckets; i++) {
        for (j = 1; j < count; j++) {
            float temp = buckets[i][j];
            for (k = j - 1; k >= 0 && buckets[i][k] > temp; k--) {
                buckets[i][k + 1] = buckets[i][k];
            }
            buckets[i][k + 1] = temp;
        }
    }

    // Copy the elements back into the input array
    int index = 0;
    for (i = 0; i < num_buckets; i++) {
        for (j = 0; j < count; j++) {
            arr[index] = buckets[i][j];
            index++;
        }
    }

    // Free the memory used by the buckets
    for (i = 0; i < num_buckets; i++) {
        free(buckets[i]);
    }
    free(buckets);
}

int main() {
    float arr[SIZE] = { 0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434, 0.1126, 0.554, 0.3349, 0.678, 0.3656, 0.9989 };
    int num_buckets = 5;

    printf("Input array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%.4f ", arr[i]);
    }
    printf("\n\n");

    bucket_sort(arr, SIZE, num_buckets);

    printf("Sorted array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%.4f ", arr[i]);
    }
    printf("\n");

    return 0;
}







.data
array: .float 3.14, 1.23, 2.71, 0.99, 2.05, 3.33
bucket: .space 24

.text
.globl main

main:
    # initialize the buckets
    li $t0, 0 # $t0 = i = 0
    li $t1, 6 # $t1 = n = length(array)
    li $t2, 3 # $t2 = m = number of buckets
    la $t3, bucket # $t3 = &bucket[0]
init_loop:
    blt $t0, $t2, init_bucket # if (i < m) goto init_bucket
    j sort # else goto sort
init_bucket:
    sw $zero, ($t3) # bucket[i] = 0
    addi $t0, $t0, 1 # i++
    addi $t3, $t3, 4 # &bucket[i+1]
    j init_loop # goto init_loop

sort:
    # put array elements into buckets
    li $t0, 0 # $t0 = i = 0
    li $t1, 6 # $t1 = n = length(array)
    li $t2, 3 # $t2 = m = number of buckets
    la $t3, bucket # $t3 = &bucket[0]
put_loop:
    blt $t0, $t1, put_bucket # if (i < n) goto put_bucket
    j print # else goto print
put_bucket:
    l.s $f4, ($t3) # $f4 = bucket[i]
    l.s $f2, array($t0) # $f2 = array[i]
    c.lt.s $f2, $f4 # if (array[i] < bucket[i]) goto next
    c.le.s $f4, $f2 # else if (bucket[i] <= array[i]) goto put_into_bucket
    j next # else goto next
put_into_bucket:
    s.s $f2, ($t3) # bucket[i] = array[i]
next:
    addi $t0, $t0, 1 # i += sizeof(float)
    blt $t0, $t1, put_loop # if (i < n) goto put_loop
    j print # else goto print

print:
    # print the sorted array
    li $t0, 0 # $t0 = i = 0
    li $t1, 6 # $t1 = n = length(array)
    la $t3, array # $t3 = &array[0]
print_loop:
    blt $t0, $t1, print_element # if (i < n) goto print_element
    j exit # else goto exit
print_element:
    l.s $f12, ($t3) # $f12 = array[i]
    li $v0, 2 # print_float
    syscall
    li $v0, 4 # print_string
    la $a0, ", " # a0 = ", "
    syscall
    addi $t0, $t0, 4 # i += sizeof(float)
    addi $t3, $t3, 4 # &array[i+1]
    j print_loop # goto print_loop

exit:
    li $v0, 10 # exit
   
